#!/usr/bin/perl

use strict;
use Cwd "abs_path";
use Template;

$0 =~ m"^(.*)/";
our $TOOLHOME = abs_path( "$1/.." // '..' );
our $CONFDIR                 = "$TOOLHOME/conf";
our $BINDIR                  = "$TOOLHOME/bin";
our $TMPDIR                  = "$TOOLHOME/tmp";
our $SPOOLDIR                = "$TOOLHOME/spool";
our $STATUSDIR               = "$TOOLHOME/status";
our $LOGDIR                  = "$TOOLHOME/log";
our $ANOMALYLOGDIR           = "$TOOLHOME/anomalylog";
our $UNMONITOREDLOGDIR       = "$TOOLHOME/unmonitoredlog";
our $CAPTUREDLOGDIR          = "$TOOLHOME/capturedlog";
our $MULTILINE2SINGLELINEDIR = "$TOOLHOME/multiline2singleline";
our $PATTERNSDIR             = "$TOOLHOME/conf/patterns";
our $FLUENTDCONFDIR          = "$TOOLHOME/conf/fluentd";

####
sub get_logstatus ($$) {
	my ($dir, $regexp) = @_;
	my $status = {};
	opendir my $d, $dir or do {
		die "$dir: cannot open, stoped";
	};
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^$regexp$";
		next unless -f "$dir/$e";
		my ($dev, $inode, $mode, $nlink, $uid, $gid, $rdev, $size) =
			stat "$dir/$e";
		$status->{$e} = {"size" => $size};
	}
	close $d;
	return $status;
}

sub load_logstatus ($) {
	my ($statusname) = @_;
	my $f = "$STATUSDIR/logstatus.$statusname";
	open my $h, '<', $f or return {};
	my $status = {};
	while( <$h> ){
		chomp;
		my ($file, $size) = split m"\t";
		$status->{$file} = {size => $size};
	}
	close $h;
	return $status;
}

sub store_logstatus ($$) {
	my ($statusname, $status) = @_;
	my $f = "$STATUSDIR/logstatus.$statusname";
	my $g = "$STATUSDIR/.logstatus.$statusname";
	open my $h, '>', $g or do {
		die "$g: cannot open, stoped";
	};
	foreach my $file ( sort {$a cmp $b} keys %$status ){
		my $values = $status->{$file};
		print $h join("\t", $file, $values->{size}), "\n";
	}
	close $h;

	unlink $f if -f $f;
	rename $g, $f or do {
		die "$f: cannot open, stoped";
	}
}

sub read_partial ($$$) {
	my ($file, $offset, $length)= @_;
	my $buff;
	open my $h, '<', $file or do {
		die "$file: cannot open, stopped";
	};
	seek $h, $offset, 0;
	read $h, $buff, $length;
	close $h;
	return $buff;
}

sub read_incremental ($$$&) {
	my ($dir, $statusname, $regexp, $handler) = @_;
	my $laststatus = load_logstatus $statusname;
	my $currstatus = get_logstatus $dir, $regexp;
	
	while( my ($file, $currvalues) = each %$currstatus ){
		my $lastvalues = $laststatus->{$file} || {'size' => 0};
		my $currsize = $currvalues->{"size"};
		my $lastsize = $lastvalues->{"size"};
		next if $currsize == $lastsize;
		$lastsize = 0 if $currsize < $lastsize;
		my $offset = $lastsize;
		my $length = $currsize - $lastsize;
		my $partial = read_partial "$dir/$file", $offset, $length;
		&$handler( $file, $partial );
	}

	store_logstatus $statusname, $currstatus;
}

####
sub remove_wildcard ($) {
	my @fields;
	foreach my $field ( split m"\.", $_[0] ){
		next if $field eq '**';
		next if $field eq '*';
		$field =~ s/\*//g;
		push @fields, $field;
	}
	return join ".", @fields;
}

sub wildcard2regexp ($) {
	my @fields;
	foreach my $field ( split m"\.", $_[0] ){
		if    ( $field eq '**' ){ push @fields, ".*";
		}elsif( $field eq '*' ) { push @fields, "[^.]*";
		}else { $field =~ s/\*/[^.]*/g; push @fields, $field; }
	}
	my $regexp = join "\\.", @fields;
	return qr"^$regexp$";
}

sub tag2singlelinelogregexp ($) {
	my ($tag_including_wildcard) = @_;
	return wildcard2regexp $tag_including_wildcard;
}

sub tag2anomalylogregexp ($) {
	my ($tag_including_wildcard) = @_;
	my $tag = quotemeta remove_wildcard $tag_including_wildcard;
	return qr"^$tag\.\d{4}-\d{2}-\d{2}(\.\d+)?$";
}

sub read_fluentd_conf () {
	my $f = "$CONFDIR/fluentd.conf";
	open my $h, '<', $f or do {
		die "$f: cannot open, stopped";
	};
	my @ignore;
	my @multiline2singleline;
	my @anomalymonitor;
	my $directive;
	my @errors;
	while( <$h> ){
		chomp;
		next if m"^\s*(#|$)";
		unless( m"^\s*(
			ignore         \s+ (?<ignore>   \S.*) |
			multiline2singleline   \s+ (?<multiline2singleline>   \S.*) |
			anomalymonitor \s+ (?<anomalymonitor> \S.*) |
			firstline      \s+ (?<firstline>      \S.*) |
			pattern        \s+ (?<pattern>        \S.*) |
			command        \s+ (?<command>        \S.*)
		)$"x ){
			print STDERR "$f:$.: illegal format, stopped";
			next;
		}
	
		if    ( $+{ignore} ){
			$directive = {
				type      => 'ignore',
				tag       => $+{ignore},
			};
			push @ignore, $directive;
		}elsif( $+{multiline2singleline} ){
			$directive = {
				type      => 'multiline2singleline',
				tag       => $+{multiline2singleline},
				tagfixed  => remove_wildcard $+{multiline2singleline},
			};
			push @multiline2singleline, $directive;
		}elsif( $+{anomalymonitor} ){
			$directive = {
				type      => 'anomalymonitor',
				tag       => $+{anomalymonitor},
				tagfixed  => remove_wildcard $+{anomalymonitor},
				outputlogregexp
				=> tag2anomalylogregexp $+{anomalymonitor},
				inputlogregexp
				=> tag2singlelinelogregexp $+{anomalymonitor},
				pattern       => 'none',
				patternfile   => "$PATTERNSDIR/none.pattern",
			};
			push @anomalymonitor, $directive;
		}elsif( $+{firstline} ){
			$directive->{firstline} = $+{firstline};
		}elsif( $+{pattern} ){
			my $f = "$PATTERNSDIR/$+{pattern}.pattern";
			$directive->{pattern} = $+{pattern};
			$directive->{patternfile} = $f;
			push @errors, "$f: not found." unless -f $f;
		}elsif( $+{command} ){
			my $f = "$MULTILINE2SINGLELINEDIR/$+{command}";
			$directive->{command} = $+{command};
			$directive->{commandfile} = $f;
			push @errors, "$f: not found." unless -f $f;
		}else{
			die;
		}
	}
	close $h;

	return {
		ignore		     => [@ignore],
		multiline2singleline => [@multiline2singleline],
		anomalymonitor	     => [@anomalymonitor],
		errors		     => [@errors],
	};
}
 
sub subcmd_build_fluentd_conf ($) {
	my ($conf) = @_;

	if( @{$conf->{errors}} ){
		foreach my $error ( @{$conf->{errors}} ){
			print "$error\n";
		}
		exit 1;
	}

	my $var = {
		ignore               => $conf->{ignore},
		multiline2singleline => $conf->{multiline2singleline},
		anomalymonitor       => $conf->{anomalymonitor},
		PANOPTICFILTER       => "$BINDIR/panopticfilter",
		SPOOLDIR             => $SPOOLDIR,
		STATUSDIR            => $STATUSDIR,
		ANOMALYLOGDIR        => $ANOMALYLOGDIR,
		UNMONITOREDLOGDIR    => $UNMONITOREDLOGDIR,
	};
	my $tt = Template->new({
		INCLUDE_PATH => $CONFDIR,
		OUTPUT_PATH => $FLUENTDCONFDIR,
	});
	$tt->process( 'fluentd.tt', $var, 'fluentd_foucault03.conf' ) or do {
		die $tt->error(), ", stopped";
	};
	exit 0;
}

sub subcmd_capture_anomalylog ($) {
	my ($conf) = @_;
	
	read_incremental
		$ANOMALYLOGDIR,
		"capture_anomalylog",
		qr"^anomalylog\..*$",
		sub {
			my ($anomalylogfile, $diff) = @_;
			my ($basename) = $anomalylogfile =~ m"^anomalylog\.(.*)";
			my $matched;
			foreach my $m ( @{ $conf->{anomalymonitor} } ){
				my $regexp = $m->{outputlogregexp};
				my $fixed = $m->{tagfixed};
				my $pattern = $m->{pattern};
				next unless $basename =~ $regexp;
				next unless defined $pattern;

				my $outputfile = "$CAPTUREDLOGDIR/capturedlog.$pattern";
				my $patternfile = "$PATTERNSDIR/$pattern.pattern";
				my $rulefile = "$PATTERNSDIR/$pattern.rules";

				my $cmd;
				$cmd .= "$BINDIR/panopticfilter filter -p $patternfile -e 's///' |";
				$cmd .= " grep ANOMALY |";
				$cmd .= " $BINDIR/panopticfilter json2text |";
				$cmd .= " $BINDIR/panopticfilter strip -r $rulefile";
				$cmd .= " -p $patternfile" if -f $patternfile;
				$cmd .= " >> $outputfile";
				open my $h, "|-", $cmd or do {
					die "command \"$cmd\", stopped";
				};
				print $h $diff;
				close $h;
				unlink $outputfile unless -s $outputfile;
				$matched = 1;
				last;
			}
			print "$anomalylogfile: not matched.\n" unless $matched;
		};

	exit 0;
}

sub subcmd_capture_unmonitoredlog ($) {
	my ($conf) = @_;

	my $cmd;
	foreach my $m ( @{ $conf->{anomalymonitor} } ){
		my $pattern = $m->{pattern};
		next unless defined $pattern;
		next if -f "$PATTERNSDIR/$pattern.pattern";

		$cmd .= "cp $CONFDIR/rules.template $PATTERNSDIR/$pattern.rules ; "
			unless -f "$PATTERNSDIR/$pattern.rules";
	}
	system $cmd if $cmd;

	read_incremental
		$UNMONITOREDLOGDIR,
		"capture_unmonitoredlog",
		qr"^unmonitoredlog\..*$",
		sub {
			my ($unmonitoredlogfile, $diff) = @_;
			my ($basename) = $unmonitoredlogfile =~ m"^unmonitoredlog\.(.*)";
			foreach my $m ( @{ $conf->{anomalymonitor} } ){
				#my $regexp = $m->{outputlogregexp};
				my $regexp = $m->{inputlogregexp};
				my $fixed = $m->{tagfixed};
				my $pattern = $m->{pattern};
				next unless $basename =~ $regexp;
				next unless defined $pattern;

				my $outputfile = "$CAPTUREDLOGDIR/capturedlog.$pattern";
				my $patternfile = "$PATTERNSDIR/$pattern.pattern";
				my $rulefile = "$PATTERNSDIR/$pattern.rules";

				my $cmd;
				$cmd .= "$BINDIR/panopticfilter strip -r $rulefile";
				$cmd .= " -p $patternfile" if -f $patternfile;
				$cmd .= " >> $outputfile";
				open my $h, "|-", $cmd or do {
					die;
				};
				print $h $diff;
				close $h;
				unlink $outputfile unless -s $outputfile;
				last;
			}
		};
	exit 0;
}

sub subcmd_import_capturedlog ($) {
	my ($conf) = @_;
	opendir my $d, $CAPTUREDLOGDIR or do {
		die "$CAPTUREDLOGDIR: cannot open. stopped";
	};
	my @capturedlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^capturedlog\.(.*)$";
		push @capturedlog, $1;
	}
	close $d;
	foreach my $pattern ( @capturedlog ){
		next unless -f "$PATTERNSDIR/$pattern.rules";
		my $cmd;
		$cmd .= "cat $CAPTUREDLOGDIR/capturedlog.$pattern";
		$cmd .= " >> $PATTERNSDIR/$pattern.sample";
		$cmd .= " && rm $CAPTUREDLOGDIR/capturedlog.$pattern";
		system $cmd;
	}
	exit 0;
}

sub subcmd_show_capturedlog ($) {
	my ($conf) = @_;
	opendir my $d, $CAPTUREDLOGDIR or do {
		die "$CAPTUREDLOGDIR: cannot open. stopped";
	};
	my @capturedlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^capturedlog\.(.*)$";
		push @capturedlog, $1;
	}
	close $d;
	foreach my $pattern ( sort @capturedlog ){
		next unless -s "$CAPTUREDLOGDIR/capturedlog.$pattern";
		print "==== $pattern ====\n";
		system "cat $CAPTUREDLOGDIR/capturedlog.$pattern";
		print "\n";
	}
	exit 0;
}

sub subcmd_list_unmonitoredlog ($) {
	my ($conf) = @_;
	
	opendir my $d, $UNMONITOREDLOGDIR or do {
		die "$UNMONITOREDLOGDIR: cannot open. stopped";
	};
	my @unmonitoredlogs;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^unmonitoredlog\.(.*)$";
		push @unmonitoredlogs, $1; 
	}
	close $d;

	foreach my $unmonitoredlog ( sort @unmonitoredlogs ){
		my $planned;
		foreach my $m ( @{ $conf->{anomalymonitor} } ){
			my $regexp = $m->{inputlogregexp};
			next unless $unmonitoredlog =~ $regexp;
			$planned = 1;
			last;
		}

		if( $planned ){
			print "$unmonitoredlog (planned)\n";
		}else{
			print "$unmonitoredlog\n";
		}
	}
	exit 0;
}

sub subcmd_strip_capturedlog ($) {
	my ($conf) = @_;
	opendir my $d, $CAPTUREDLOGDIR or do {
		die "$CAPTUREDLOGDIR: cannot open. stopped";
	};
	my @capturedlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^capturedlog\.(.*)$";
		push @capturedlog, $1;
	}
	close $d;
	foreach my $pattern ( sort @capturedlog ){
		next unless -s "$CAPTUREDLOGDIR/capturedlog.$pattern";
		my $cmd;
		$cmd .= "$BINDIR/panopticfilter strip -r $PATTERNSDIR/$pattern.rules";
		$cmd .= " -p $PATTERNSDIR/$pattern.pattern" if -f "$PATTERNSDIR/$pattern.pattern";
		$cmd .= " < $CAPTUREDLOGDIR/capturedlog.$pattern";
		$cmd .= " > $CAPTUREDLOGDIR/stripedlog.$pattern ; ";
		$cmd .= "mv $CAPTUREDLOGDIR/stripedlog.$pattern";
		$cmd .= " $CAPTUREDLOGDIR/capturedlog.$pattern";
		system $cmd;
		unlink "$CAPTUREDLOGDIR/capturedlog.$pattern" unless -s "$CAPTUREDLOGDIR/capturedlog.$pattern";
	}
	exit 0;
}

sub subcmd_whydonthit_capturedlog ($) {
	my ($conf) = @_;
	opendir my $d, $CAPTUREDLOGDIR or do {
		die "$CAPTUREDLOGDIR: cannot open. stopped";
	};
	my @capturedlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^capturedlog\.(.*)$";
		push @capturedlog, $1;
	}
	close $d;
	foreach my $pattern ( sort @capturedlog ){
		next unless -s "$CAPTUREDLOGDIR/capturedlog.$pattern";
		my $cmd;
		$cmd .= "$BINDIR/panopticfilter whydonthit";
		$cmd .= " -r $PATTERNSDIR/$pattern.rules";
		$cmd .= " -f $PATTERNSDIR/$pattern.sample";
		$cmd .= " < $CAPTUREDLOGDIR/capturedlog.$pattern |";
		$cmd .= "jq .";
		system $cmd;
	}
	exit 0;
}

sub subcmd_strip_sample ($) {
	my ($conf) = @_;
	opendir my $d, $PATTERNSDIR or do {
		die "$PATTERNSDIR: cannot open. stopped";
	};
	my @samples;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless -s "$PATTERNSDIR/$e";
		next unless $e =~ m"^([-\w]+)(\+[-\w]+)?\.sample$";
		next unless -f "$PATTERNSDIR/$1.rules";
		push @samples, {rules => $1, name => "$1$2"};
	}
	close $d;
	foreach my $sample ( sort @samples ){
		my $name = $sample->{name};
		my $rules = $sample->{rules};
		my $cmd;
		$cmd .= "$BINDIR/panopticfilter strip -r $PATTERNSDIR/$rules.rules";
		$cmd .= " < $PATTERNSDIR/$name.sample";
		$cmd .= " > $PATTERNSDIR/$name.sample.new ; ";
		$cmd .= "mv $PATTERNSDIR/$name.sample.new";
		$cmd .= " $PATTERNSDIR/$name.sample";
		system $cmd;
	}
	exit 0;
}

####
sub get_mtime ($) {
	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
	    $atime,$mtime,$ctime,$blksize,$blocks) = stat $_[0];
	return $mtime;
}

sub subcmd_build_patterns () {
	opendir my $d, $PATTERNSDIR or do {
		die "$PATTERNSDIR: cannot open, stopped";
	};
	my %mtime;
	my %option;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		if    ( $e =~ m"^([-\w]+)\.pattern$" ){
			my $mtime = get_mtime "$PATTERNSDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{pattern} = $mtime;
		}elsif( $e =~ m"^([-\w]+)\.rules$" ){
			my $mtime = get_mtime "$PATTERNSDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{src} = $mtime if
				not defined($mtime{$1}->{src}) or
				$mtime > $mtime{$1}->{src};
		}elsif( $e =~ m"^([-\w]+)(?:\+([-\w]+))?\.sample$" ){
			my $mtime = get_mtime "$PATTERNSDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{src} = $mtime if
				not defined($mtime{$1}->{src}) or
				$mtime > $mtime{$1}->{src};
			push @{ $option{$1} }, $2 if $2;
		}
	}
	close $d;

	while( my ($k, $v) = each %mtime ){
		print "$PATTERNSDIR/$k.sample: not found.\n" unless
			-f "$PATTERNSDIR/$k.sample";
		print "$PATTERNSDIR/$k.rules: not found.\n" unless
			-f "$PATTERNSDIR/$k.rules";
		next unless -f "$PATTERNSDIR/$k.sample" and -f "$PATTERNSDIR/$k.rules";
		next if -f "$PATTERNSDIR/$k.pattern" and $v->{src} < $v->{pattern};
		my $command = "$BINDIR/panopticfilter build";
		$command .= " -r $PATTERNSDIR/$k.rules -d $PATTERNSDIR/$k.diagnosis";
		$command .= " -o $PATTERNSDIR/$k.pattern -f $PATTERNSDIR/$k.sample";
		foreach my $i ( @{$option{$k} // []} ){
			$command .= " -e $i -f $PATTERNSDIR/$k+$i.sample";
		}
		system "$command\n";
	}

	exit 0;
}

####
my $conf = read_fluentd_conf;
if    ($ARGV[0] eq 'build_fluentd_conf'){
	subcmd_build_fluentd_conf $conf;
}elsif($ARGV[0] eq 'build_patterns'){
	subcmd_build_patterns;
}elsif($ARGV[0] eq 'capture_anomalylog'){
	subcmd_capture_anomalylog $conf;
}elsif($ARGV[0] eq 'capture_unmonitoredlog'){
	subcmd_capture_unmonitoredlog $conf;
}elsif($ARGV[0] eq 'show_capturedlog'){
	subcmd_show_capturedlog $conf;
}elsif($ARGV[0] eq 'strip_capturedlog'){
	subcmd_strip_capturedlog $conf;
}elsif($ARGV[0] eq 'whydonthit_capturedlog'){
	subcmd_whydonthit_capturedlog $conf;
}elsif($ARGV[0] eq 'import_capturedlog'){
	subcmd_import_capturedlog $conf;
}elsif($ARGV[0] eq 'list_unmonitoredlog'){
	subcmd_list_unmonitoredlog $conf;
}elsif($ARGV[0] eq 'strip_sample'){
	subcmd_strip_sample $conf;
}else{
	print	"usage: % $0 <SUBCOMMAND>\n",
		"\n",
		"    SUBCOMMAND\n",
		"         build_fluentd_conf\n",
		"         build_patterns\n",
		"         capture_anomalylog\n",
		"         capture_unmonitoredlog\n",
		"         show_capturedlog\n",
		"         strip_capturedlog\n",
		"         import_capturedlog\n",
		"         list_unmonitoredlog\n",
		"         strip_sample\n",
		"\n";
	exit 1;
}


####

exit 0;

 

