#!/usr/bin/perl

use strict;
use Template;

our $CONFDIR = "/opt/foucault03/conf";
our $BINDIR = "/opt/foucault03/bin";
our $TMPDIR = "/opt/foucault03/tmp";
our $LOGDIR = "/opt/foucault03/log";
our $ANOMALYLOGDIR     = "/opt/foucault03/anomalylog";
our $UNMONITOREDLOGDIR = "/opt/foucault03/unmonitoredlog";
our $CAPTUREDLOGDIR    = "/opt/foucault03/capturedlog";
our $MULTILINE2SINGLELINEDIR = "/opt/foucault03/multiline2singleline";
our $FLUENTDCONFDIR = "/etc/td-agent/fj_conf.d";

sub remove_wildcard ($) {
	my @fields;
	foreach my $field ( split m"\.", $_[0] ){
		next if $field eq '**';
		next if $field eq '*';
		$field =~ s/\*//g;
		push @fields, $field;
	}
	return join ".", @fields;
}

sub wildcard2regexp ($) {
	my @fields;
	foreach my $field ( split m"\.", $_[0] ){
		if    ( $field eq '**' ){ push @fields, ".*";
		}elsif( $field eq '*' ) { push @fields, "[^.]*";
		}else { $field =~ s/\*/[^.]*/g; push @fields, $field; }
	}
	my $regexp = join "\\.", @fields;
	return qr"^$regexp$";
}

sub tag2singlelinelogregexp ($) {
	my ($tag_including_wildcard) = @_;
	return wildcard2regexp $tag_including_wildcard;
}

sub tag2anomalylogregexp ($) {
	my ($tag_including_wildcard) = @_;
	my $tag = quotemeta remove_wildcard $tag_including_wildcard;
	return qr"^$tag\.\d{4}-\d{2}-\d{2}(\.\d+)?$";
}

sub read_conf () {
	my $f = "$CONFDIR/foucault03.conf";
	open my $h, '<', $f or do {
		die "$f: cannot open, stopped";
	};
	my @ignore;
	my @multiline2singleline;
	my @anomalymonitor;
	my $directive;
	my @errors;
	while( <$h> ){
		chomp;
		next if m"^\s*(#|$)";
		unless( m"^\s*(
			ignore         \s+ (?<ignore>   \S.*) |
			multiline2singleline   \s+ (?<multiline2singleline>   \S.*) |
			anomalymonitor \s+ (?<anomalymonitor> \S.*) |
			firstline      \s+ (?<firstline>      \S.*) |
			pattern        \s+ (?<pattern>        \S.*) |
			command        \s+ (?<command>        \S.*)
		)$"x ){
			print STDERR "$f:$.: illegal format, stopped";
			next;
		}
	
		if    ( $+{ignore} ){
			$directive = {
				type      => 'ignore',
				tag       => $+{ignore},
			};
			push @ignore, $directive;
		}elsif( $+{multiline2singleline} ){
			$directive = {
				type      => 'multiline2singleline',
				tag       => $+{multiline2singleline},
				tagfixed  => remove_wildcard $+{multiline2singleline},
			};
			push @multiline2singleline, $directive;
		}elsif( $+{anomalymonitor} ){
			$directive = {
				type      => 'anomalymonitor',
				tag       => $+{anomalymonitor},
				tagfixed  => remove_wildcard $+{anomalymonitor},
				outputlogregexp
				=> tag2anomalylogregexp $+{anomalymonitor},
				inputlogregexp
				=> tag2singlelinelogregexp $+{anomalymonitor},
			};
			push @anomalymonitor, $directive;
		}elsif( $+{firstline} ){
			$directive->{firstline} = $+{firstline};
		}elsif( $+{pattern} ){
			$directive->{pattern} = $+{pattern};
			push @errors, "$CONFDIR/$+{pattern}.pattern: not found."
				unless -f "$CONFDIR/$+{pattern}.pattern";
		}elsif( $+{command} ){
			$directive->{command} = $+{command};
			push @errors, "$MULTILINE2SINGLELINEDIR/$+{command}.pl: not found."
				unless -f "$MULTILINE2SINGLELINEDIR/$+{command}.pl";
		}else{
			die;
		}
	}
	close $h;

	return {
		ignore		     => [@ignore],
		multiline2singleline => [@multiline2singleline],
		anomalymonitor	     => [@anomalymonitor],
		errors		     => [@errors],
	};
}
 
sub action_build_fluentdconf ($) {
	my ($conf) = @_;

	if( @{$conf->{errors}} ){
		foreach my $error ( @{$conf->{errors}} ){
			print "$error\n";
		}
		exit 1;
	}

	my $var = {
		ignore               => $conf->{ignore},
		multiline2singleline => $conf->{multiline2singleline},
		anomalymonitor       => $conf->{anomalymonitor},
	};
	my $tt = Template->new({
		INCLUDE_PATH => $CONFDIR,
		OUTPUT_PATH => $FLUENTDCONFDIR
	});
	$tt->process( 'foucault03.tt', $var, 'fluentd_foucault03.conf' ) or do {
		die $tt->error(), ", stopped";
	};
	exit 0;
}

sub action_capture_anomalylog ($) {
	my ($conf) = @_;
	
	opendir my $d, $ANOMALYLOGDIR or do {
		die "$ANOMALYLOGDIR: cannot open. stopped";
	};
	my @anomalylog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^anomalylog\.(.*)$";
		push @anomalylog, $1; 
	}
	close $d;

	foreach my $anomalylog ( @anomalylog ){
		my $matched;
		foreach my $m ( @{ $conf->{anomalymonitor} } ){
			my $regexp = $m->{outputlogregexp};
			my $fixed = $m->{tagfixed};
			my $pattern = $m->{pattern};
			next unless $anomalylog =~ $regexp;
			next unless defined $pattern;
			my $cmd;
			$cmd .= "cat $ANOMALYLOGDIR/anomalylog.$anomalylog |";
			$cmd .= " $BINDIR/panopticfilter filter -p $CONFDIR/$pattern.pattern -e 's///' |";
			$cmd .= " grep ANOMALY |";
			$cmd .= " $BINDIR/panopticfilter json2text |";
			$cmd .= " $BINDIR/panopticfilter strip -r $CONFDIR/$pattern.rules";
			$cmd .= " -p $CONFDIR/$pattern.pattern" if -f "$CONFDIR/$pattern.pattern";
			$cmd .= " >> $CAPTUREDLOGDIR/capturedlog.$pattern";
			system $cmd;
			$matched = 1;
			last;
		}
		print "$anomalylog: not matched.\n" unless $matched;
	}
	exit 0;
}

sub action_capture_unmonitoredlog ($) {
	my ($conf) = @_;

	opendir my $d, $UNMONITOREDLOGDIR or do {
		die "$UNMONITOREDLOGDIR: cannot open. stopped";
	};
	my @unmonitoredlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^unmonitoredlog\.(.*)$";
		push @unmonitoredlog, $1; 
	}
	close $d;

	foreach my $m ( @{ $conf->{anomalymonitor} } ){
		my $pattern = $m->{pattern};
		next unless defined $pattern;
		next if -f "$CONFDIR/$pattern.pattern";

		my $cmd;
		unless( -f "$CONFDIR/$pattern.rules" ){
			$cmd .= "cp /opt/foucault03/conf/GENERIC.rules /opt/foucault03/conf/$pattern.rules ; ";
		}
		unless( -f "$CONFDIR/$pattern.sample" ){
			my $regexp = $m->{inputlogregexp};
			my @logs;
			foreach my $unmonitoredlog ( @unmonitoredlog ){
				next unless $unmonitoredlog =~ $regexp;
				push @logs, "$UNMONITOREDLOGDIR/unmonitoredlog.$unmonitoredlog";
			}
			if( @logs ){
				$cmd .= "cat @logs |";
				$cmd .= " $BINDIR/panopticfilter strip -r $CONFDIR/$pattern.rules";
				$cmd .= " >> $CAPTUREDLOGDIR/capturedlog.$pattern";
			}
		}
		system $cmd if $cmd;
	}
	exit 0;
}

sub action_import_capturedlog ($) {
	my ($conf) = @_;
	opendir my $d, $CAPTUREDLOGDIR or do {
		die "$CAPTUREDLOGDIR: cannot open. stopped";
	};
	my @capturedlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^capturedlog\.(.*)$";
		push @capturedlog, $1;
	}
	close $d;
	foreach my $pattern ( @capturedlog ){
		next unless -f "$CONFDIR/$pattern.rules";
		my $cmd;
		$cmd .= "cat $CAPTUREDLOGDIR/capturedlog.$pattern";
		$cmd .= " >> $CONFDIR/$pattern.sample";
		$cmd .= " && rm $CAPTUREDLOGDIR/capturedlog.$pattern";
		system $cmd;
	}
	exit 0;
}

sub action_show_capturedlog ($) {
	my ($conf) = @_;
	opendir my $d, $CAPTUREDLOGDIR or do {
		die "$CAPTUREDLOGDIR: cannot open. stopped";
	};
	my @capturedlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^capturedlog\.(.*)$";
		push @capturedlog, $1;
	}
	close $d;
	foreach my $pattern ( sort @capturedlog ){
		next unless -s "$CAPTUREDLOGDIR/capturedlog.$pattern";
		print "==== $pattern ====\n";
		system "cat $CAPTUREDLOGDIR/capturedlog.$pattern";
		print "\n";
	}
	exit 0;
}

sub action_list_unmonitoredlog ($) {
	my ($conf) = @_;
	
	opendir my $d, $UNMONITOREDLOGDIR or do {
		die "$UNMONITOREDLOGDIR: cannot open. stopped";
	};
	my @unmonitoredlogs;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^unmonitoredlog\.(.*)$";
		push @unmonitoredlogs, $1; 
	}
	close $d;

	foreach my $unmonitoredlog ( sort @unmonitoredlogs ){
		my $planned;
		foreach my $m ( @{ $conf->{anomalymonitor} } ){
			my $regexp = $m->{inputlogregexp};
			next unless $unmonitoredlog =~ $regexp;
			$planned = 1;
			last;
		}

		if( $planned ){
			print "$unmonitoredlog (planned)\n";
		}else{
			print "$unmonitoredlog\n";
		}
	}
	exit 0;
}

sub action_strip_capturedlog ($) {
	my ($conf) = @_;
	opendir my $d, $CAPTUREDLOGDIR or do {
		die "$CAPTUREDLOGDIR: cannot open. stopped";
	};
	my @capturedlog;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless $e =~ m"^capturedlog\.(.*)$";
		push @capturedlog, $1;
	}
	close $d;
	foreach my $pattern ( sort @capturedlog ){
		next unless -s "$CAPTUREDLOGDIR/capturedlog.$pattern";
		my $cmd;
		$cmd .= "$BINDIR/panopticfilter strip -r $CONFDIR/$pattern.rules";
		$cmd .= " -p $CONFDIR/$pattern.pattern" if -f "$CONFDIR/$pattern.pattern";
		$cmd .= " < $CAPTUREDLOGDIR/capturedlog.$pattern";
		$cmd .= " > $CAPTUREDLOGDIR/stripedlog.$pattern ; ";
		$cmd .= "mv $CAPTUREDLOGDIR/stripedlog.$pattern";
		$cmd .= " $CAPTUREDLOGDIR/capturedlog.$pattern";
		system $cmd;
	}
	exit 0;
}

sub action_strip_sample ($) {
	my ($conf) = @_;
	opendir my $d, $CONFDIR or do {
		die "$CONFDIR: cannot open. stopped";
	};
	my @samples;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless -s "$CONFDIR/$e";
		next unless $e =~ m"^([-\w]+)(\+[-\w]+)?\.sample$";
		next unless -f "$CONFDIR/$1.rules";
		push @samples, {rules => $1, name => "$1$2"};
	}
	close $d;
	foreach my $sample ( sort @samples ){
		my $name = $sample->{name};
		my $rules = $sample->{rules};
		my $cmd;
		$cmd .= "$BINDIR/panopticfilter strip -r $CONFDIR/$rules.rules";
		$cmd .= " < $CONFDIR/$name.sample";
		$cmd .= " > $CONFDIR/$name.sample.new ; ";
		$cmd .= "mv $CONFDIR/$name.sample.new";
		$cmd .= " $CONFDIR/$name.sample";
		system $cmd;
	}
	exit 0;
}

####
sub get_mtime ($) {
	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
	    $atime,$mtime,$ctime,$blksize,$blocks) = stat $_[0];
	return $mtime;
}

sub action_build_pattern () {
	opendir my $d, $CONFDIR or do {
		die "$CONFDIR: cannot open, stopped";
	};
	my %mtime;
	my %option;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		if    ( $e =~ m"^([-\w]+)\.pattern$" ){
			my $mtime = get_mtime "$CONFDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{pattern} = $mtime;
		}elsif( $e =~ m"^([-\w]+)\.rules$" ){
			my $mtime = get_mtime "$CONFDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{src} = $mtime if
				not defined($mtime{$1}->{src}) or
				$mtime > $mtime{$1}->{src};
		}elsif( $e =~ m"^([-\w]+)(?:\+([-\w]+))?\.sample$" ){
			my $mtime = get_mtime "$CONFDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{src} = $mtime if
				not defined($mtime{$1}->{src}) or
				$mtime > $mtime{$1}->{src};
			push @{ $option{$1} }, $2 if $2;
		}
	}
	close $d;

	while( my ($k, $v) = each %mtime ){
		print "$CONFDIR/$k.sample: not found.\n" unless
			-f "$CONFDIR/$k.sample";
		print "$CONFDIR/$k.rules: not found.\n" unless
			-f "$CONFDIR/$k.rules";
		next unless -f "$CONFDIR/$k.sample" and -f "$CONFDIR/$k.rules";
		next if -f "$CONFDIR/$k.pattern" and $v->{src} < $v->{pattern};
		my $command = "$BINDIR/panopticfilter build";
		$command .= " -r $CONFDIR/$k.rules -d $CONFDIR/$k.diagnosis";
		$command .= " -o $CONFDIR/$k.pattern -f $CONFDIR/$k.sample";
		foreach my $i ( @{$option{$k} // []} ){
			$command .= " -e $i -f $CONFDIR/$k+$i.sample";
		}
		system "$command\n";
	}

	exit 0;
}

####
my $conf = read_conf;
if    ($ARGV[0] eq 'build_conf'){
	action_build_fluentdconf $conf;
}elsif($ARGV[0] eq 'build_pattern'){
	action_build_pattern;
}elsif($ARGV[0] eq 'show_anomalylog'){
	action_show_anomalylog $conf;
}elsif($ARGV[0] eq 'cover_pattern'){
	action_cover_pattern $conf;


}elsif($ARGV[0] eq 'capture_anomalylog'){
	action_capture_anomalylog $conf;
}elsif($ARGV[0] eq 'capture_unmonitoredlog'){
	action_capture_unmonitoredlog $conf;
}elsif($ARGV[0] eq 'show_capturedlog'){
	action_show_capturedlog $conf;
}elsif($ARGV[0] eq 'strip_capturedlog'){
	action_strip_capturedlog $conf;
}elsif($ARGV[0] eq 'import_capturedlog'){
	action_import_capturedlog $conf;
}elsif($ARGV[0] eq 'list_unmonitoredlog'){
	action_list_unmonitoredlog $conf;
}elsif($ARGV[0] eq 'strip_sample'){
	action_strip_sample $conf;
}else{
	print	"usage: % $0 <SUBCOMMAND>\n",
		"\n",
		"    SUBCOMMAND\n",
		"         build_conf\n",
		"         build_pattern\n",
		"         capture_anomalylog\n",
		"         capture_unmonitoredlog\n",
		"         show_capturedlog\n",
		"         strip_capturedlog\n",
		"         import_capturedlog\n",
		"         list_unmonitoredlog\n",
		"         strip_sample\n",
		"\n";
	exit 1;
}

